const BASE_URL = "https://hotel.sejestedomain.dk";

function handleHttpErrors(res) {
  if (!res.ok) {
    return Promise.reject({ status: res.status, fullError: res.json() });
  }
  return res.json();
}

function apiFacade() {
  // Token Handling - Persist in localStorage
  const setToken = (token) => localStorage.setItem("jwtToken", token);
  const getToken = () => localStorage.getItem("jwtToken");
  const loggedIn = () => getToken() !== null;
  const logout = () => localStorage.removeItem("jwtToken");

  // Role handling from JWT token
  const getUserRoles = () => {
    const token = getToken();
    if (token) {
      const payloadBase64 = token.split(".")[1];
      const decodedClaims = JSON.parse(window.atob(payloadBase64));
      return decodedClaims.roles || "";
    }
    return "";
  };

  const hasUserAccess = (neededRole) => {
    const roles = getUserRoles().split(",");
    return roles.includes(neededRole);
  };

  // Login
  const login = (user, password) => {
    const options = makeOptions("POST", false, {
      username: user,
      password: password,
    });
    return fetch(`${BASE_URL}/api/auth/login`, options)
      .then(handleHttpErrors)
      .then((res) => {
        setToken(res.token); // Save the JWT token to localStorage
      });
  };

  // Generic Fetch
  const fetchData = async (endpoint) => {
    const options = makeOptions("GET", true);
    return await fetch(`${BASE_URL}${endpoint}`, options).then(handleHttpErrors);
  };

  // Helper to build fetch options
  const makeOptions = (method, addToken, body) => {
    const opts = {
      method: method,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };
    if (addToken && loggedIn()) {
      opts.headers["Authorization"] = `Bearer ${getToken()}`;
    }
    if (body) {
      opts.body = JSON.stringify(body);
    }
    return opts;
  };

  // POST Data
  const postData = async (endpoint, data) => {
    const options = makeOptions("POST", true, data);
    return await fetch(`${BASE_URL}${endpoint}`, options).then(handleHttpErrors);
  };

  // DELETE Data
  const deleteData = async (endpoint) => {
    const options = makeOptions("DELETE", true);
    return await fetch(`${BASE_URL}${endpoint}`, options).then(handleHttpErrors);
  };

  // PUT Data (Edit)
  const editData = async (endpoint, data) => {
    const options = makeOptions("PUT", true, data);
    return await fetch(`${BASE_URL}${endpoint}`, options).then(handleHttpErrors);
  };

  return {
    setToken,
    getToken,
    getUserRoles,
    login,
    logout,
    loggedIn,
    fetchData,
    hasUserAccess,
    postData,
    deleteData,
    editData,
  };
}

export default apiFacade();
