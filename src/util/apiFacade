const BASE_URL = "https://hotel.sejestedomain.dk";

function handleHttpErrors(res) {
  if (!res.ok) {
    return Promise.reject({ status: res.status, fullError: res.json() });
  }
  return res.json();
}

function apiFacade() {
  const setToken = (token) => sessionStorage.setItem("jwtToken", token);
  const getToken = () => sessionStorage.getItem("jwtToken");
  const loggedIn = () => getToken() !== null;
  const logout = () => sessionStorage.removeItem("jwtToken");

  const getUserRoles = () => {
    const token = getToken();
    if (token != null) {
      const payloadBase64 = getToken().split(".")[1];
      const decodedClaims = JSON.parse(window.atob(payloadBase64));
      const roles = decodedClaims.roles;
      return roles;
    } else return "";
  };

  const getBarsByAuthor = async (authorId) => {
    const options = makeOptions("GET", true);
    return await fetch(`${BASE_URL}/api/authors/${authorId}`, options)
      .then(handleHttpErrors)
      .then((author) => author.bars); // Return only the bars from the response
  };
    


  const hasUserAccess = (neededRole) => {
    const roles = getUserRoles().split(",");
    return roles.includes(neededRole);
  };

  const login = (user, password) => {
    const options = makeOptions("POST", false, {
      username: user,
      password: password,
    });
    return fetch(`${BASE_URL}/api/auth/login`, options)
      .then(handleHttpErrors)
      .then((res) => {
        setToken(res.token);
      });
  };

  const fetchData = async (endpoint) => {
    const options = makeOptions("GET", true);
    return await fetch(`${BASE_URL}${endpoint}`, options).then(
      handleHttpErrors
    ); // Concatenate endpoint correctly
  };

  const makeOptions = (method, addToken, body) => {
    const opts = {
      method: method,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };
    if (addToken && loggedIn()) {
      opts.headers["Authorization"] = `Bearer ${getToken()}`;
    }
    if (body) {
      opts.body = JSON.stringify(body);
    }
    return opts;
  };

  const postData = async (endpoint, data) => {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      throw new Error("Failed to post data");
    }
    return await response.json();
  };

  const postUserData = async (endpoint, data) => {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const errorDetail = await response.json();
      console.error("Error details from server:", errorDetail);
      throw new Error("Failed to post data");
    }
    return await response.json();
  };
  

  const deleteData = async (endpoint) => {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${getToken()}`,
      },
    });
  
    if (!response.ok) {
      throw new Error(`Failed to delete data: ${response.status}`);
    }
  
    const text = await response.text();
    return text ? JSON.parse(text) : {};
  };

  const editData = async (endpoint, data) => {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      throw new Error("Failed to edit data");
    }
    return await response.json();
  };
  
  return {
    makeOptions,
    getUserRoles,
    login,
    logout,
    loggedIn,
    fetchData,
    hasUserAccess,
    postData,
    deleteData,
    editData,
    postUserData,
  };
}

export default apiFacade();
